USE HR_EMP;

-- -------------------------------------
-- STRING FUNCTIONS
-- -------------------------------------
-- NO OF CHARACTERS IN A STRING

SELECT LENGTH ('GREAT LEARNING');

SELECT LENGTH('MYSQL') AS CHAR_LEN;

SELECT LENGTH ('GREAT LEARNING') AS CHARLENGTH FROM DUAL;

SELECT * FROM EMPLOYEES;
SELECT FIRST_NAME, LENGTH(FIRST_NAME) AS FN_CHAR_LEN FROM EMPLOYEES;

-- CONCAT STRINGS
SELECT CONCAT ('GREAT ', 'LEARNING') AS LABEL;
SELECT CONCAT(FIRST_NAME,' ', LAST_NAME) AS EMPLOYEE_NAME FROM EMPLOYEES;

SELECT * FROM EMPLOYEES;
SELECT CONCAT(FIRST_NAME,' ', LAST_NAME,'-', JOB_ID) AS EMPLOYEE_DETAILS FROM EMPLOYEES;


SELECT CONCAT( 'GREAT', 'LEARNING') AS CONCAT_STR;

-- UPPER AND LOWER CASE
SELECT UPPER(FIRST_NAME) FROM EMPLOYEES;
SELECT FIRST_NAME, UPPER(FIRST_NAME) , UCASE(FIRST_NAME) FROM EMPLOYEES;

SELECT FIRST_NAME, LOWER(FIRST_NAME) , LCASE(FIRST_NAME) FROM EMPLOYEES;

SELECT LOWER ("GREAT LEARNING")AS LCASE;
SELECT UPPER("GREATLEARNING")AS UCASE;

-- SUBSTRING

SELECT SUBSTR("GREAT LEARNING", 1, 5) AS EXTRACTEDSTRING; -- FROM 1STR CHARACTER, COUNT 5 CHARACTERS
SELECT SUBSTR("GREAT LEARNING", 1, 1) AS EXTRACTEDSTRING;
SELECT SUBSTR("GREAT LEARNING", 7, 2) AS EXTRACTEDSTRING;
SELECT SUBSTR("GREAT LEARNING", -1, 1) AS EXTRACTEDSTRING;
SELECT SUBSTR("GREAT LEARNING", -8, 5) AS EXTRACTEDSTRING;

-- REPLACE
SELECT REPLACE("GREAT LAKES", "LAKES", "LEARNING") FROM DUAL; -- MySQL allows DUAL to be specified as a table in queries that do not need data from any tables.
SELECT REPLACE("GREAT LAKES", "LAKES", "LEARNING") AS REPLACED;

SELECT * FROM EMPLOYEES;
SELECT JOB_ID, REPLACE(JOB_ID, 'MGR','MANAGER') AS NEW_JOBID FROM EMPLOYEES;

-- TRIMMING
SELECT LTRIM('              GREAT LAKES') FROM DUAL;
SELECT RTRIM('             GREAT LAKES                ') FROM DUAL;
SELECT TRIM('              GREAT LAKES                ') FROM DUAL;
SELECT TRIM('GREAT' FROM 'GREAT LAKES    ') FROM DUAL;
SELECT TRIM('$' FROM '180.33$$') FROM DUAL;

SELECT TRIM( 'GREAT' FROM 'GREAT LEARNING') AS TRIMMEDSTRING;

-- REVERSE A STRING
SELECT REVERSE('GREAT') AS REVERSED_STRING FROM DUAL;

SELECT REVERSE("GREAT LEARNING") AS EXTRACTEDSTRING;





-- -------------------------------------
-- NUMERICAL FUNCTIONS
-- -------------------------------------

SELECT 25+7, 25-7, 25*7,25/7 ;

SELECT 25 MOD 7, 25 DIV 7;

SELECT COS(0) AS COS;
SELECT COS(1) AS COS;

-- CEIL, FLOOR
SELECT CEIL(57.0001), CEIL(57.898) ;
SELECT FLOOR(57.0001), FLOOR(57.898) ;


-- ROUND/TRUNC

SELECT TRUNCATE(57.49825,2), TRUNCATE(57.848,2) ; -- KEEP 2 DECIMALS
SELECT ROUND(57.4982,2), ROUND(57.848,2); -- KEEP 2 DECIMALS AFTER ROUNDING UP

-- LEAST GREATEST
SELECT LEAST(10,20,30) FROM DUAL;
SELECT GREATEST(10,20,30) FROM DUAL;

SELECT LEAST(20,5,30);
SELECT GREATEST(20,5,30);

SELECT * FROM EMPLOYEES;
SELECT SALARY, SALARY * 0.10 AS BONUS FROM EMPLOYEES; -- 10%

SELECT SQRT(121) FROM DUAL;
SELECT POWER(3,2) FROM DUAL;

SELECT ABS(-324) FROM DUAL;
SELECT SIGN(-76), SIGN( 76), SIGN(0) FROM DUAL;

-- -------------------------------------
-- DATE FUNCTIONS
-- -------------------------------------
SELECT NOW(); -- 2023-06-15 10:51:46
SELECT CURDATE(); -- 2023-06-15
SELECT CURTIME(); -- 10:52:09
SELECT SYSDATE(); -- 2023-06-15 10:52:16

SELECT DATEDIFF(CURDATE(), '2021-06-15');   -- answer is in number of days
SELECT DATEDIFF(CURDATE(), '2021-06-15')/365; -- answer is in years

SELECT DATE_ADD( CURDATE(), INTERVAL 10 DAY); -- add 10 days and gives the result date
SELECT DATE_ADD( CURDATE(), INTERVAL 4 MONTH); -- adds 4 months (counts 30 or 31 days according to the month)

SELECT CURDATE(), DAY(CURDATE()), MONTH(CURDATE()), YEAR(CURDATE());
SELECT DAYNAME(CURDATE());
SELECT DAYOFYEAR(CURDATE()); -- IN 365 DAYS, WHICH DAY IS TODAY?
SELECT DAYOFWEEK(CURDATE()); -- WHICH DAY IN THIS WEEK? SUN - 1
SELECT LAST_DAY('2021-06-09') ;
SELECT LAST_DAY('2021-07-09') ;

-- DATE FORMATTING
SELECT CURDATE(), DATE_FORMAT(CURDATE(), '%D-%M-%Y');

-- -------------------------------------
-- CONVERSION FUNCTIONS
-- -------------------------------------
SELECT CAST(150 AS CHAR);

SELECT * FROM EMPLOYEES;

SELECT * FROM EMPLOYEES 
WHERE COMMISSION_PCT IS NULL;

SELECT COALESCE(NULL,1,2,'GREAT LEARNING'); -- FIRST NOT NULL VALUE (CAN HAVE MULTIPLE LIST OF VALUES)
SELECT COALESCE(NULL,NULL,NULL,'GREAT LEARNING');

SELECT ifnull(NULL,5); -- FIRST NOT NULL VALUE (BUT HAS ONLY 2 VALUES)
SELECT ifnull(6,5);
-- IF NULL
-- <> NULL : SAME VALUE
-- IS NULL : ALT_VALUE (SINGLE VALUE)


SELECT EMPLOYEE_ID, FIRST_NAME,SALARY, COMMISSION_PCT , COALESCE(COMMISSION_PCT,0) -- returns first non-null value
FROM EMPLOYEES;

SELECT EMPLOYEE_ID, FIRST_NAME,SALARY, COMMISSION_PCT ,  IFNULL(COMMISSION_PCT,0) -- if null, 2nd arg, else 1st arg
FROM EMPLOYEES;
